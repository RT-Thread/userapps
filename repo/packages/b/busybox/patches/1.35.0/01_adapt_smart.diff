diff --git a/archival/bbunzip.c b/archival/bbunzip.c
index 0ac059c19..d0356b090 100644
--- a/archival/bbunzip.c
+++ b/archival/bbunzip.c
@@ -132,10 +132,12 @@ int FAST_FUNC bbunpack(char **argv,
 				xfunc_die();
 		}
 
-		if (!(option_mask32 & BBUNPK_OPT_STDOUT))
-			xclose(STDOUT_FILENO); /* with error check! */
+        if (!(option_mask32 & BBUNPK_OPT_STDOUT)) {
+            xclose(STDOUT_FILENO); /* with error check! */
+            xclose(STDIN_FILENO);
+        }
 
-		if (filename) {
+        if (filename) {
 			char *del = new_name;
 
 			if (status >= 0) {
diff --git a/coreutils/ls.c b/coreutils/ls.c
index 48f5eb482..1c8699279 100644
--- a/coreutils/ls.c
+++ b/coreutils/ls.c
@@ -185,7 +185,7 @@
 # define IF_NOT_FEATURE_LS_TIMESTAMPS(...)
 #endif
 
-
+static char list_buff[100];
 enum {
 TERMINAL_WIDTH  = 80, /* use 79 if terminal has linefold bug */
 
@@ -1066,6 +1066,9 @@ int ls_main(int argc UNUSED_PARAM, char **argv)
 	unsigned dnfiles;
 	unsigned dndirs;
 	unsigned i;
+
+    struct stat stat_buf;
+    int         value = 0;
 #if ENABLE_FEATURE_LS_COLOR
 	/* colored LS support by JaWi, janwillem.janssen@lxtreme.nl */
 	/* coreutils 6.10:
@@ -1198,10 +1201,16 @@ int ls_main(int argc UNUSED_PARAM, char **argv)
 	}
 
 	argv += optind;
-	if (!argv[0])
-		*--argv = (char*)".";
-
-	if (argv[1])
+    value = stat(list_buff, &stat_buf);
+    if (!value) {
+        if (!argv[0])
+            *--argv = list_buff;
+    }
+    else {
+        if (!argv[0])
+            *--argv = (char *)".";
+    }
+    if (argv[1])
 		G.show_dirname = 1; /* 2 or more items? label directories */
 
 	/* stuff the command line file names into a dnode array */
diff --git a/e2fsprogs/tune2fs.c b/e2fsprogs/tune2fs.c
index f7fcd88bf..98670f567 100644
--- a/e2fsprogs/tune2fs.c
+++ b/e2fsprogs/tune2fs.c
@@ -36,7 +36,7 @@
 //usage:       "Adjust filesystem options on ext[23] filesystems"
 
 #include "libbb.h"
-#include <linux/fs.h>
+//#include <linux/fs.h>
 #include "bb_e2fs_defs.h"
 
 enum {
diff --git a/editors/patch.c b/editors/patch.c
index 110176630..28e53b949 100644
--- a/editors/patch.c
+++ b/editors/patch.c
@@ -163,7 +163,8 @@ static void finish_oldfile(void)
 		if (!ENABLE_LONG_OPTS || TT.tempname[0]) { /* not --dry-run? */
 			temp = xstrdup(TT.tempname);
 			temp[strlen(temp) - 6] = '\0';
-			rename(TT.tempname, temp);
+            xunlink(temp);
+            rename(TT.tempname, temp);
 			free(temp);
 			free(TT.tempname);
 		}
diff --git a/include/libbb.h b/include/libbb.h
index a48782832..fb8860ca6 100644
--- a/include/libbb.h
+++ b/include/libbb.h
@@ -2248,7 +2248,7 @@ extern const char bb_path_wtmp_file[] ALIGN1;
 
 /* Busybox mount uses either /proc/mounts or /etc/mtab to
  * get the list of currently mounted filesystems */
-#define bb_path_mtab_file IF_FEATURE_MTAB_SUPPORT("/etc/mtab")IF_NOT_FEATURE_MTAB_SUPPORT("/proc/mounts")
+#define bb_path_mtab_file IF_FEATURE_MTAB_SUPPORT("/etc/mtab")IF_NOT_FEATURE_MTAB_SUPPORT("/etc/mtab")
 
 #define bb_path_passwd_file  _PATH_PASSWD
 #define bb_path_group_file   _PATH_GROUP
diff --git a/init/halt.c b/init/halt.c
index fe3cb9e75..a039708ae 100644
--- a/init/halt.c
+++ b/init/halt.c
@@ -222,9 +222,12 @@ int halt_main(int argc UNUSED_PARAM, char **argv)
 			/* talk to init */
 			if (!ENABLE_FEATURE_CALL_TELINIT) {
 				/* bbox init assumed */
+				#if 0
 				rc = kill(1, signals[which]);
 				if (init_was_not_there())
 					rc = kill(1, signals[which]);
+				#endif
+				rc = reboot(magic[which]);
 			} else {
 				/* SysV style init assumed */
 				/* runlevels:
diff --git a/init/init.c b/init/init.c
index efab5dcb4..a62f1e8df 100644
--- a/init/init.c
+++ b/init/init.c
@@ -131,7 +131,7 @@
 #include "common_bufsiz.h"
 #include <syslog.h>
 #ifdef __linux__
-# include <linux/vt.h>
+//# include <linux/vt.h>
 # include <sys/sysinfo.h>
 #endif
 #include "reboot.h" /* reboot() constants */
diff --git a/libbb/copyfd.c b/libbb/copyfd.c
index 7f9d92ea9..e88c62e5a 100644
--- a/libbb/copyfd.c
+++ b/libbb/copyfd.c
@@ -84,7 +84,14 @@ static off_t bb_full_fd_action(int src_fd, int dst_fd, off_t size)
 			}
 		}
 #endif
-		rd = safe_read(src_fd, buffer,
+        char tmpstr[10];
+        if (buffer[0] != NULL && !strcmp(applet_name, "zcat")) {
+            memset(buffer, '\0', sizeof(buffer));
+            // need to run printf or sprintf, or buffer will not be setted success.
+            sprintf(tmpstr, "%c", buffer[0]);
+            break;
+        }
+        rd = safe_read(src_fd, buffer,
 			size > buffer_size ? buffer_size : size);
 		if (rd < 0) {
 			bb_simple_perror_msg(bb_msg_read_error);
diff --git a/libbb/find_pid_by_name.c b/libbb/find_pid_by_name.c
index fe13f7211..8bddb20f1 100644
--- a/libbb/find_pid_by_name.c
+++ b/libbb/find_pid_by_name.c
@@ -85,16 +85,19 @@ pid_t* FAST_FUNC find_pid_by_name(const char *procName)
 	procps_status_t* p = NULL;
 
 	pidList = xzalloc(sizeof(*pidList));
-	while ((p = procps_scan(p, PSSCAN_PID|PSSCAN_COMM|PSSCAN_ARGVN|PSSCAN_EXE))) {
+	//while ((p = procps_scan(p, PSSCAN_PID|PSSCAN_COMM|PSSCAN_ARGVN|PSSCAN_EXE))) {
+	while ((p = procps_scan(p, PSSCAN_PID|PSSCAN_COMM|PSSCAN_ARGVN))) {
 		if (comm_match(p, procName)
 		/* or we require argv0 to match (essential for matching reexeced /proc/self/exe)*/
 		 || (p->argv0 && strcmp(bb_basename(p->argv0), procName) == 0)
 		/* or we require /proc/PID/exe link to match */
+		#if 0
 		 || (p->exe && strcmp(
 					procName[0] == '/' ? p->exe /* support "pidof /path/to/binary" case too */
 							: bb_basename(p->exe),
 					procName
 					) == 0)
+		#endif
 		) {
 			pidList = xrealloc_vector(pidList, 2, i);
 			pidList[i++] = p->pid;
diff --git a/libbb/loop.c b/libbb/loop.c
index cb8fa2442..58677486b 100644
--- a/libbb/loop.c
+++ b/libbb/loop.c
@@ -8,14 +8,194 @@
  * Licensed under GPLv2 or later, see file LICENSE in this source tree.
  */
 #include "libbb.h"
-#include <linux/version.h>
+// #include <linux/version.h>
+#define LINUX_VERSION_CODE 328777
+#define KERNEL_VERSION(a,b,c) (((a) << 16) + ((b) << 8) + (c))
+
+#ifndef _LINUX_LOOP_H
+#define _LINUX_LOOP_H
+
+/*
+ * include/linux/loop.h
+ *
+ * Written by Theodore Ts'o, 3/29/93.
+ *
+ * Copyright 1993 by Theodore Ts'o.  Redistribution of this file is
+ * permitted under the GNU General Public License.
+ */
+
+#define LO_NAME_SIZE	64
+#define LO_KEY_SIZE	32
+
+#ifdef __KERNEL__
+#include <linux/bio.h>
+#include <linux/blkdev.h>
+#include <linux/spinlock.h>
+#include <linux/mutex.h>
+
+/* Possible states of device */
+enum {
+	Lo_unbound,
+	Lo_bound,
+	Lo_rundown,
+};
+
+struct loop_func_table;
+
+struct loop_device {
+	int		lo_number;
+	int		lo_refcnt;
+	loff_t		lo_offset;
+	loff_t		lo_sizelimit;
+	int		lo_flags;
+	int		(*transfer)(struct loop_device *, int cmd,
+				    struct page *raw_page, unsigned raw_off,
+				    struct page *loop_page, unsigned loop_off,
+				    int size, sector_t real_block);
+	char		lo_file_name[LO_NAME_SIZE];
+	char		lo_crypt_name[LO_NAME_SIZE];
+	char		lo_encrypt_key[LO_KEY_SIZE];
+	int		lo_encrypt_key_size;
+	struct loop_func_table *lo_encryption;
+	__u32           lo_init[2];
+	uid_t		lo_key_owner;	/* Who set the key */
+	int		(*ioctl)(struct loop_device *, int cmd, 
+				 unsigned long arg); 
+
+	struct file *	lo_backing_file;
+	struct block_device *lo_device;
+	unsigned	lo_blocksize;
+	void		*key_data; 
+
+	gfp_t		old_gfp_mask;
+
+	spinlock_t		lo_lock;
+	struct bio_list		lo_bio_list;
+	int			lo_state;
+	struct mutex		lo_ctl_mutex;
+	struct task_struct	*lo_thread;
+	wait_queue_head_t	lo_event;
+
+	struct request_queue	*lo_queue;
+	struct gendisk		*lo_disk;
+	struct list_head	lo_list;
+};
+
+#endif /* __KERNEL__ */
+
+/*
+ * Loop flags
+ */
+enum {
+	LO_FLAGS_READ_ONLY	= 1,
+	LO_FLAGS_USE_AOPS	= 2,
+	LO_FLAGS_AUTOCLEAR	= 4,
+};
+
+//#include <asm/posix_types.h>	/* for __kernel_old_dev_t */
+typedef unsigned short		__kernel_old_dev_t;
+#define __kernel_old_dev_t __kernel_old_dev_t
+//#include <linux/types.h>	/* for __u64 */
+typedef __signed__ char __s8;
+typedef unsigned char __u8;
+
+typedef __signed__ short __s16;
+typedef unsigned short __u16;
+
+typedef __signed__ int __s32;
+typedef unsigned int __u32;
+
+__extension__ typedef __signed__ long long __s64;
+__extension__ typedef unsigned long long __u64;
+
+/* Backwards compatibility version */
+struct loop_info {
+	int		   lo_number;		/* ioctl r/o */
+	__kernel_old_dev_t lo_device; 		/* ioctl r/o */
+	unsigned long	   lo_inode; 		/* ioctl r/o */
+	__kernel_old_dev_t lo_rdevice; 		/* ioctl r/o */
+	int		   lo_offset;
+	int		   lo_encrypt_type;
+	int		   lo_encrypt_key_size; 	/* ioctl w/o */
+	int		   lo_flags;			/* ioctl r/o */
+	char		   lo_name[LO_NAME_SIZE];
+	unsigned char	   lo_encrypt_key[LO_KEY_SIZE]; /* ioctl w/o */
+	unsigned long	   lo_init[2];
+	char		   reserved[4];
+};
+
+struct loop_info64 {
+	__u64		   lo_device;			/* ioctl r/o */
+	__u64		   lo_inode;			/* ioctl r/o */
+	__u64		   lo_rdevice;			/* ioctl r/o */
+	__u64		   lo_offset;
+	__u64		   lo_sizelimit;/* bytes, 0 == max available */
+	__u32		   lo_number;			/* ioctl r/o */
+	__u32		   lo_encrypt_type;
+	__u32		   lo_encrypt_key_size;		/* ioctl w/o */
+	__u32		   lo_flags;			/* ioctl r/o */
+	__u8		   lo_file_name[LO_NAME_SIZE];
+	__u8		   lo_crypt_name[LO_NAME_SIZE];
+	__u8		   lo_encrypt_key[LO_KEY_SIZE]; /* ioctl w/o */
+	__u64		   lo_init[2];
+};
+
+/*
+ * Loop filter types
+ */
+
+#define LO_CRYPT_NONE		0
+#define LO_CRYPT_XOR		1
+#define LO_CRYPT_DES		2
+#define LO_CRYPT_FISH2		3    /* Twofish encryption */
+#define LO_CRYPT_BLOW		4
+#define LO_CRYPT_CAST128	5
+#define LO_CRYPT_IDEA		6
+#define LO_CRYPT_DUMMY		9
+#define LO_CRYPT_SKIPJACK	10
+#define LO_CRYPT_CRYPTOAPI	18
+#define MAX_LO_CRYPT		20
+
+#ifdef __KERNEL__
+/* Support for loadable transfer modules */
+struct loop_func_table {
+	int number;	/* filter type */ 
+	int (*transfer)(struct loop_device *lo, int cmd,
+			struct page *raw_page, unsigned raw_off,
+			struct page *loop_page, unsigned loop_off,
+			int size, sector_t real_block);
+	int (*init)(struct loop_device *, const struct loop_info64 *); 
+	/* release is called from loop_unregister_transfer or clr_fd */
+	int (*release)(struct loop_device *); 
+	int (*ioctl)(struct loop_device *, int cmd, unsigned long arg);
+	struct module *owner;
+}; 
+
+int loop_register_transfer(struct loop_func_table *funcs);
+int loop_unregister_transfer(int number); 
+
+#endif
+/*
+ * IOCTL commands --- we will commandeer 0x4C ('L')
+ */
+
+#define LOOP_SET_FD		0x4C00
+#define LOOP_CLR_FD		0x4C01
+#define LOOP_SET_STATUS		0x4C02
+#define LOOP_GET_STATUS		0x4C03
+#define LOOP_SET_STATUS64	0x4C04
+#define LOOP_GET_STATUS64	0x4C05
+#define LOOP_CHANGE_FD		0x4C06
+#define LOOP_SET_CAPACITY	0x4C07
+
+#endif
 
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,0)
 
 /* For 2.6, use the cleaned up header to get the 64 bit API. */
 // Commented out per Rob's request
 //# include "fix_u32.h" /* some old toolchains need __u64 for linux/loop.h */
-# include <linux/loop.h>
+//# include <linux/loop.h>
 typedef struct loop_info64 bb_loop_info;
 # define BB_LOOP_SET_STATUS LOOP_SET_STATUS64
 # define BB_LOOP_GET_STATUS LOOP_GET_STATUS64
diff --git a/libbb/wfopen.c b/libbb/wfopen.c
index 1c7f7f3d7..a3f255b0c 100644
--- a/libbb/wfopen.c
+++ b/libbb/wfopen.c
@@ -12,7 +12,7 @@ FILE* FAST_FUNC fopen_or_warn(const char *path, const char *mode)
 {
 	FILE *fp = fopen(path, mode);
 	if (!fp) {
-		bb_simple_perror_msg(path);
+		//bb_simple_perror_msg(path);
 		//errno = 0; /* why? */
 	}
 	return fp;
diff --git a/miscutils/devmem2.c b/miscutils/devmem2.c
new file mode 100644
index 000000000..8a9cf44fd
--- /dev/null
+++ b/miscutils/devmem2.c
@@ -0,0 +1,185 @@
+/*
+ * Copyright (C) 2000, Jan-Derk Bakker (J.D.Bakker@its.tudelft.nl)
+ * Copyright (C) 2008, BusyBox Team. -solar 4/26/08
+ * Licensed under GPLv2 or later, see file LICENSE in this source tree.
+ */
+//config:config DEVMEM2
+//config:	bool "devmem2 (2.5 kb)"
+//config:	default y
+//config:	help
+//config:	devmem2_main is a small program that reads and writes from physical
+//config:	memory using /dev/mem.
+
+//applet:IF_DEVMEM2(APPLET(devmem2, BB_DIR_SBIN, BB_SUID_DROP))
+
+//kbuild:lib-$(CONFIG_DEVMEM2) += devmem2.o
+
+//usage:#define devmem2_trivial_usage
+//usage:	"ADDRESS [WIDTH [VALUE]]"
+//usage:#define devmem2_full_usage "\n\n"
+//usage:       "Read/write from physical address\n"
+//usage:     "\n	ADDRESS	Address to act upon"
+//usage:     "\n	WIDTH	Width (8/16/...)"
+//usage:     "\n	VALUE	Data to be written"
+
+#include "libbb.h"
+#include <stdio.h>
+#include <stdlib.h>
+#include <stdint.h>
+#include <unistd.h>
+#include <fcntl.h>
+#include <sys/ioctl.h>
+
+#define MEM_DEVICE_NAME     "/dev/mem"
+
+int flag = 0;//read
+uint64_t writeval = 0; //write
+
+#define MEM_IOCTL_MMAP_BASE         'm'
+#define MEM_IOCTL_USER_MMAP         _IO(MEM_IOCTL_MMAP_BASE, 1)
+#define MEM_IOCTL_USER_MUNMAP       _IO(MEM_IOCTL_MMAP_BASE, 2)
+
+#pragma pack(push)  /* push current alignment to stack */
+#pragma pack(4)     /* set alignment to 4 byte boundary */
+
+struct mem_query_phys
+{
+    int fd;
+    uint64_t phys_addrs;
+    uint64_t size;
+    void *data;
+};
+
+static int mem_fd = -1;
+
+struct map_addr_info
+{
+    uint32_t phyAddr;
+    size_t mapSize;
+    size_t mapMode;
+    void *virtAddr;
+};
+
+int phys_addr_map(struct map_addr_info *info)
+{
+    int ret;
+    struct mem_query_phys mem_info = { 0 };
+
+    if (!info)
+        return -1;
+
+    mem_fd = open(MEM_DEVICE_NAME, O_RDWR);
+    if (mem_fd < 0)
+    {
+        printf("mem device open failed\n");
+        return -1;
+    }
+
+    mem_info.phys_addrs = (uint64_t)info->phyAddr;
+    mem_info.size = (uint64_t)info->mapSize;
+
+    ret = ioctl(mem_fd, MEM_IOCTL_USER_MMAP, &mem_info);
+    if (ret)
+    {
+        printf("mmap failed\n");
+        return -1;
+    }
+
+    info->virtAddr = mem_info.data;
+
+    return 0;
+}
+
+int phys_addr_unmap(struct map_addr_info *info)
+{
+    struct mem_query_phys mem_info;
+    mem_info.data = info->virtAddr;
+    mem_info.size = (uint64_t)info->mapSize;
+    mem_info.phys_addrs = (uint64_t)info->phyAddr;
+
+    if (mem_fd < 0)
+    {
+        return -1;
+    }
+
+    return ioctl(mem_fd, MEM_IOCTL_USER_MUNMAP, &mem_info);
+}
+
+void devmem2(uint32_t trace_dump_hdr, uint32_t dump_len, int flag)
+{
+	uint64_t read_result;
+    int ret;
+
+    struct map_addr_info info =
+    {
+        .phyAddr = trace_dump_hdr,
+        .mapSize = dump_len,
+        .mapMode = 0,
+    };
+
+    ret= phys_addr_map(&info);
+
+	if (!flag) {
+		switch (dump_len) {
+		case 8:
+			read_result = *(volatile uint8_t*)info.virtAddr;
+			break;
+		case 16:
+			read_result = *(volatile uint16_t*)info.virtAddr;
+			break;
+		case 32:
+			read_result = *(volatile uint32_t*)info.virtAddr;
+			break;
+		case 64:
+			read_result = *(volatile uint64_t*)info.virtAddr;
+			break;
+		default:
+			bb_simple_error_msg_and_die("bad width");
+		}
+		printf("0x%0*llX\n", (dump_len >> 2), (unsigned long long)read_result);
+	} else {
+		switch (dump_len) {
+		case 8:
+			*(volatile uint8_t*)info.virtAddr = writeval;
+			break;
+		case 16:
+			*(volatile uint16_t*)info.virtAddr = writeval;
+			break;
+		case 32:
+			*(volatile uint32_t*)info.virtAddr = writeval;
+			break;
+		case 64:
+			*(volatile uint64_t*)info.virtAddr = writeval;
+			break;
+		default:
+			bb_simple_error_msg_and_die("bad width");
+		}
+	}
+}
+
+int devmem2_main(int argc, char **argv) MAIN_EXTERNALLY_VISIBLE;
+int devmem2_main(int argc UNUSED_PARAM, char **argv)
+{
+    uint32_t dump_addr;
+    uint32_t dump_len;
+
+    if (argc > 1)
+        dump_addr = strtoul(argv[1], 0, 0);
+    else
+        bb_show_usage();
+
+    if (argc > 2)
+        dump_len = strtoul(argv[2], 0, 0);
+    else
+        dump_len = 8 * sizeof(int);
+
+	if (argc > 3)
+	{
+		flag = 1;
+		writeval = bb_strtoull(argv[3], NULL, 0);
+	}
+
+    devmem2(dump_addr, dump_len, flag);
+
+	return EXIT_SUCCESS;
+}
diff --git a/miscutils/partprobe.c b/miscutils/partprobe.c
index 0fb1927b7..5a2915ef5 100644
--- a/miscutils/partprobe.c
+++ b/miscutils/partprobe.c
@@ -14,7 +14,7 @@
 
 //kbuild:lib-$(CONFIG_PARTPROBE) += partprobe.o
 
-#include <linux/fs.h>
+//#include <linux/fs.h>
 #include "libbb.h"
 #ifndef BLKRRPART
 # define BLKRRPART _IO(0x12,95)
diff --git a/networking/ftpd.c b/networking/ftpd.c
index 0d6a289c7..358b5aae1 100644
--- a/networking/ftpd.c
+++ b/networking/ftpd.c
@@ -131,6 +131,7 @@
 #define STR1(s) #s
 #define STR(s) STR1(s)
 
+char list_buff[100] = {'0'};
 /* Convert a constant to 3-digit string, packed into uint32_t */
 enum {
 	/* Shift for Nth decimal digit */
@@ -154,6 +155,8 @@ enum {
 
 #define MSG_OK "Operation successful\r\n"
 #define MSG_ERR "Error\r\n"
+int   totalnum = 0;
+char *basedir  = NULL;
 
 struct globals {
 	int pasv_listen_fd;
@@ -327,26 +330,133 @@ static void
 handle_pwd(void)
 {
 	char *cwd, *response;
-
-	cwd = xrealloc_getcwd_or_warn(NULL);
+    int   cwd_len      = 0;
+    int   response_len = 0;
+    int   basedir_len  = 0;
+    basedir_len        = strlen(basedir);
+    cwd = xrealloc_getcwd_or_warn(NULL);
 	if (cwd == NULL)
 		cwd = xstrdup("");
 
-	/* We have to promote each " to "" */
+    cwd_len      = strlen(cwd);
+    /* We have to promote each " to "" */
 	response = escape_text(" \"", cwd, ('"' << 8) + '"');
-	free(cwd);
-	cmdio_write(STRNUM32(FTP_PWDOK), response);
-	free(response);
+    response_len = strlen(response);
+    free(cwd);
+    char buff[response_len];
+    memset(buff, sizeof(buff), response_len);
+    if (cwd_len <= basedir_len) {
+        strncpy(buff, response, 3);
+        strncpy(buff + 3, &response[response_len - 1], 1);
+        buff[4] = '\0';
+        cmdio_write(STRNUM32(FTP_PWDOK), buff);
+    }
+    else {
+        strncpy(buff, response, 2);
+        strncpy(buff + 2, &response[2 + basedir_len], response_len - 2 - basedir_len);
+        buff[response_len - basedir_len] = '\0';
+        cmdio_write(STRNUM32(FTP_PWDOK), buff);
+    }
+    free(response);
 }
 
 static void
 handle_cwd(void)
 {
-	if (!G.ftp_arg || chdir(G.ftp_arg) != 0) {
-		WRITE_ERR(FTP_FILEFAIL);
-		return;
-	}
-	WRITE_OK(FTP_CWDOK);
+    char buff[500];
+    char buff_path[500];
+    int  len_basedir = 0;
+    int  len_oldpath = 0;
+    int  len_newpath = 0;
+    int  buff_len    = 0;
+    memset(buff, 0, sizeof(buff));
+    memset(buff_path, 0, sizeof(buff_path));
+    memset(list_buff, 0, sizeof(list_buff));
+    memcpy(list_buff, basedir, strlen(basedir));
+
+    char *cwd_old, *response_old;
+    char *cwd_new, *response_new;
+
+    cwd_old = xrealloc_getcwd_or_warn(NULL);
+    if (cwd_old == NULL)
+        cwd_old = xstrdup("");
+
+    response_old = escape_text(" \"", cwd_old, ('"' << 8) + '"');
+    len_oldpath  = strlen(response_old);
+    free(cwd_old);
+    len_basedir = strlen(basedir);
+
+    strncpy(buff, response_old + 2, strlen(response_old) - 3);
+
+    free(response_old);
+    if (strcmp(G.ftp_arg, "/") == 0) {
+        if (!basedir || chdir(basedir) != 0) {
+            memset(list_buff, 0, sizeof(list_buff));
+            memcpy(list_buff, buff, strlen(buff));
+            WRITE_ERR(FTP_FILEFAIL);
+            return;
+        }
+        memset(list_buff, 0, sizeof(list_buff));
+        memcpy(list_buff, basedir, strlen(basedir));
+        WRITE_OK(FTP_CWDOK);
+        return;
+    }
+
+    if ((G.ftp_arg[0] == '/') && (strlen(G.ftp_arg) != 1)) {
+        strcpy(buff_path, basedir);
+        strcat(buff_path, G.ftp_arg);
+        if (!buff_path || chdir(buff_path) != 0) {
+            memset(list_buff, 0, sizeof(list_buff));
+            memcpy(list_buff, buff, strlen(buff));
+            WRITE_ERR(FTP_FILEFAIL);
+            return;
+        }
+        memset(list_buff, 0, sizeof(list_buff));
+        memcpy(list_buff, buff_path, strlen(buff_path));
+        goto CHECK;
+    }
+    else {
+        if (!G.ftp_arg || chdir(buff) != 0) {
+            memset(list_buff, 0, sizeof(list_buff));
+            memcpy(list_buff, buff, strlen(buff));
+            WRITE_ERR(FTP_FILEFAIL);
+            return;
+        }
+        if (!G.ftp_arg || chdir(G.ftp_arg) != 0) {
+            memset(list_buff, 0, sizeof(list_buff));
+            memcpy(list_buff, buff, strlen(buff));
+            WRITE_ERR(FTP_FILEFAIL);
+            return;
+        }
+        memset(list_buff, 0, sizeof(list_buff));
+        buff_len = strlen(buff);
+        memcpy(list_buff, buff, buff_len);
+        list_buff[buff_len] = '/';
+        strcat(list_buff + buff_len + 1, G.ftp_arg);
+    }
+CHECK:
+    cwd_new = xrealloc_getcwd_or_warn(NULL);
+    if (cwd_new == NULL)
+        cwd_new = xstrdup("");
+
+    response_new = escape_text(" \"", cwd_new, ('"' << 8) + '"');
+    free(cwd_new);
+    len_newpath = strlen(response_new);
+    free(response_new);
+    if ((len_newpath - 3) < len_basedir) {
+        if (!buff || chdir(buff) != 0) {
+            memset(list_buff, 0, sizeof(list_buff));
+            memcpy(list_buff, buff, strlen(buff));
+            WRITE_ERR(FTP_FILEFAIL);
+            return;
+        }
+        memset(list_buff, 0, sizeof(list_buff));
+        memcpy(list_buff, buff, strlen(buff));
+        WRITE_ERR(FTP_FILEFAIL);
+        return;
+    }
+
+    WRITE_OK(FTP_CWDOK);
 }
 
 static void
@@ -754,15 +864,20 @@ handle_dir_common(int opts)
 	FILE *ls_fp;
 	char *line;
 	int ls_fd;
+    int   number = 0;
 
-	if (!(opts & USE_CTRL_CONN) && !port_or_pasv_was_seen())
+    if (!(opts & USE_CTRL_CONN) && !port_or_pasv_was_seen())
 		return; /* port_or_pasv_was_seen emitted error response */
 
 	ls_fd = popen_ls((opts & LONG_LISTING) ? "-lA" : "-1A");
-	ls_fp = xfdopen_for_read(ls_fd);
+    if (ls_fd < 0) {
+        WRITE_OK(FTP_TRANSFEROK);
+        return;
+    }
+    ls_fp = xfdopen_for_read(ls_fd);
 /* FIXME: filenames with embedded newlines are mishandled */
 
-	if (opts & USE_CTRL_CONN) {
+    if (opts & USE_CTRL_CONN) {
 		/* STAT <filename> */
 		cmdio_write_raw(STR(FTP_STATFILE_OK)"-File status:\r\n");
 		while (1) {
@@ -783,7 +898,10 @@ handle_dir_common(int opts)
 			while (1) {
 				unsigned len;
 
-				line = xmalloc_fgets(ls_fp);
+                if (number >= totalnum)
+                    break;
+                number++;
+                line = xmalloc_fgets(ls_fp);
 				if (!line)
 					break;
 				/* I've seen clients complaining when they
@@ -902,21 +1020,55 @@ handle_mkd(void)
 static void
 handle_rmd(void)
 {
-	if (!G.ftp_arg || rmdir(G.ftp_arg) != 0) {
-		WRITE_ERR(FTP_FILEFAIL);
-		return;
-	}
-	WRITE_OK(FTP_RMDIROK);
+    char buff[200];
+    int  basedir_len = 0;
+    int  arg_len     = 0;
+    memset(buff, sizeof(buff), 200);
+    basedir_len = strlen(basedir);
+    arg_len     = strlen(G.ftp_arg);
+    if (G.ftp_arg[0] == '/') {
+        strncpy(buff, basedir, basedir_len);
+        strncpy(buff + basedir_len, G.ftp_arg, arg_len);
+        buff[basedir_len + arg_len] = '\0';
+        if (!G.ftp_arg || rmdir(buff) != 0) {
+            WRITE_ERR(FTP_FILEFAIL);
+            return;
+        }
+    }
+    else {
+        if (!G.ftp_arg || rmdir(G.ftp_arg) != 0) {
+            WRITE_ERR(FTP_FILEFAIL);
+            return;
+        }
+    }
+    WRITE_OK(FTP_RMDIROK);
 }
 
 static void
 handle_dele(void)
 {
-	if (!G.ftp_arg || unlink(G.ftp_arg) != 0) {
-		WRITE_ERR(FTP_FILEFAIL);
-		return;
-	}
-	WRITE_OK(FTP_DELEOK);
+    char buff[200];
+    int  basedir_len = 0;
+    int  arg_len     = 0;
+    memset(buff, sizeof(buff), 200);
+    basedir_len = strlen(basedir);
+    arg_len     = strlen(G.ftp_arg);
+    if (G.ftp_arg[0] == '/') {
+        strncpy(buff, basedir, basedir_len);
+        strncpy(buff + basedir_len, G.ftp_arg, arg_len);
+        buff[basedir_len + arg_len] = '\0';
+        if (!G.ftp_arg || rmdir(buff) != 0) {
+            WRITE_ERR(FTP_FILEFAIL);
+            return;
+        }
+    }
+    else {
+        if (!G.ftp_arg || rmdir(G.ftp_arg) != 0) {
+            WRITE_ERR(FTP_FILEFAIL);
+            return;
+        }
+    }
+    WRITE_OK(FTP_DELEOK);
 }
 
 static void
@@ -1169,6 +1321,53 @@ enum {
 	OPT_w = (1 << (BIT_A + 3)) * ENABLE_FEATURE_FTPD_WRITE,
 };
 
+void GetTheNumberOfCurrentPath()
+{
+    struct stat    s_buf;
+    DIR           *dire;
+    struct dirent *ptr;
+    char          *ret;
+    int            len = 0;
+    char           currentpath[500];
+    totalnum       = 0;
+    int stat_value = 0;
+    memset(currentpath, 0, sizeof(currentpath));
+    unsigned path_max_temporary;
+    path_max_temporary = 500;
+    ret                = getcwd(currentpath, path_max_temporary);
+    if (ret == NULL) {
+        perror("failed to obtain currentpath");
+        exit(-1);
+    }
+
+    len = strlen(currentpath);
+    if (G.ftp_arg != NULL) {
+        stat_value = stat(G.ftp_arg, &s_buf);
+        if (stat_value == 0) {
+            if (S_ISDIR(s_buf.st_mode)) {
+                currentpath[len]     = '/';
+                currentpath[len + 1] = '\0';
+                strcat(currentpath, G.ftp_arg);
+            }
+            else if (S_ISREG(s_buf.st_mode)) {
+                totalnum = 1;
+                return;
+            }
+        }
+        else {
+            totalnum = 0;
+            return;
+        }
+    }
+    dire = opendir(currentpath);
+    if (dire == NULL)
+        return 0;
+    while ((ptr = readdir(dire)) != NULL)
+        totalnum++;
+    closedir(dire);
+    return 0;
+}
+
 int ftpd_main(int argc, char **argv) MAIN_EXTERNALLY_VISIBLE;
 int ftpd_main(int argc UNUSED_PARAM, char **argv)
 {
@@ -1180,7 +1379,8 @@ int ftpd_main(int argc UNUSED_PARAM, char **argv)
 	unsigned verbose_S;
 	smallint opts;
 
-	INIT_G();
+    int value = 0;
+    INIT_G();
 
 	abs_timeout = 1 * 60 * 60;
 	verbose_S = 0;
@@ -1296,13 +1496,14 @@ int ftpd_main(int argc UNUSED_PARAM, char **argv)
 #endif
 	argv += optind;
 	if (argv[0]) {
-		const char *basedir = argv[0];
+        // const char *basedir = argv[0];
+        basedir = argv[0];
 #if !BB_MMU
 		G.root_fd = xopen("/", O_RDONLY | O_DIRECTORY);
 		close_on_exec_on(G.root_fd);
 #endif
 		if (chroot(basedir) == 0)
-			basedir = "/";
+        // basedir = "/";
 #if !BB_MMU
 		else {
 			close(G.root_fd);
@@ -1362,50 +1563,49 @@ int ftpd_main(int argc UNUSED_PARAM, char **argv)
 	 * respectively."
 	 */
 
-	while (1) {
-		uint32_t cmdval = cmdio_get_cmd_and_arg();
-
-		if (cmdval == const_QUIT) {
-			WRITE_OK(FTP_GOODBYE);
-			return 0;
-		}
-		else if (cmdval == const_USER)
-			/* This would mean "ok, now give me PASS". */
-			/*WRITE_OK(FTP_GIVEPWORD);*/
-			/* vsftpd can be configured to not require that,
-			 * and this also saves one roundtrip:
-			 */
-			WRITE_OK(FTP_LOGINOK);
-		else if (cmdval == const_PASS)
-			WRITE_OK(FTP_LOGINOK);
-		else if (cmdval == const_NOOP)
-			WRITE_OK(FTP_NOOPOK);
-		else if (cmdval == const_TYPE)
-			WRITE_OK(FTP_TYPEOK);
-		else if (cmdval == const_STRU)
-			WRITE_OK(FTP_STRUOK);
-		else if (cmdval == const_MODE)
-			WRITE_OK(FTP_MODEOK);
-		else if (cmdval == const_ALLO)
-			WRITE_OK(FTP_ALLOOK);
-		else if (cmdval == const_SYST)
-			cmdio_write_raw(STR(FTP_SYSTOK)" UNIX Type: L8\r\n");
-		else if (cmdval == const_PWD || cmdval == const_XPWD)
-			handle_pwd();
-		else if (cmdval == const_CWD)
-			handle_cwd();
-		else if (cmdval == const_CDUP) /* cd .. */
-			handle_cdup();
-		/* HELP is nearly useless, but we can reuse FEAT for it */
-		/* lftp uses FEAT */
-		else if (cmdval == const_HELP || cmdval == const_FEAT)
-			handle_feat(cmdval == const_HELP
-					? STRNUM32(FTP_HELP)
-					: STRNUM32(FTP_STATOK)
-			);
-		else if (cmdval == const_LIST) /* ls -l */
-			handle_list();
-		else if (cmdval == const_NLST) /* "name list", bare ls */
+    memcpy(list_buff, basedir, strlen(basedir));
+    while (1) {
+        uint32_t cmdval = cmdio_get_cmd_and_arg();
+        if (cmdval == const_QUIT) {
+        WRITE_OK(FTP_GOODBYE);
+        return 0;
+        }
+        else if (cmdval == const_USER)
+        /* This would mean "ok, now give me PASS". */
+        /*WRITE_OK(FTP_GIVEPWORD);*/
+        /* vsftpd can be configured to not require that,
+         * and this also saves one roundtrip:
+         */
+        WRITE_OK(FTP_LOGINOK);
+        else if (cmdval == const_PASS)
+        WRITE_OK(FTP_LOGINOK);
+        else if (cmdval == const_NOOP)
+        WRITE_OK(FTP_NOOPOK);
+        else if (cmdval == const_TYPE)
+        WRITE_OK(FTP_TYPEOK);
+        else if (cmdval == const_STRU)
+        WRITE_OK(FTP_STRUOK);
+        else if (cmdval == const_MODE)
+        WRITE_OK(FTP_MODEOK);
+        else if (cmdval == const_ALLO)
+        WRITE_OK(FTP_ALLOOK);
+        else if (cmdval == const_SYST)
+        cmdio_write_raw(STR(FTP_SYSTOK) " UNIX Type: L8\r\n");
+        else if (cmdval == const_PWD || cmdval == const_XPWD)
+        handle_pwd();
+        else if (cmdval == const_CWD)
+        handle_cwd();
+        else if (cmdval == const_CDUP) /* cd .. */
+        handle_cdup();
+        /* HELP is nearly useless, but we can reuse FEAT for it */
+        /* lftp uses FEAT */
+        else if (cmdval == const_HELP || cmdval == const_FEAT)
+        handle_feat(cmdval == const_HELP ? STRNUM32(FTP_HELP) : STRNUM32(FTP_STATOK));
+        else if (cmdval == const_LIST) { /* ls -l */
+        GetTheNumberOfCurrentPath();
+        handle_list();
+        }
+        else if (cmdval == const_NLST) /* "name list", bare ls */
 			handle_nlst();
 		/* SIZE is crucial for wget's download indicator etc */
 		/* Mozilla, lftp use MDTM (presumably for caching) */
@@ -1472,5 +1672,5 @@ int ftpd_main(int argc UNUSED_PARAM, char **argv)
 #endif
 			cmdio_write_raw(STR(FTP_BADCMD)" Unknown command\r\n");
 		}
-	}
+    }
 }
diff --git a/networking/ping.c b/networking/ping.c
index 86d8088de..a7d96f589 100644
--- a/networking/ping.c
+++ b/networking/ping.c
@@ -530,6 +530,38 @@ static void sendping_tail(void (*sp)(int), int size_pkt)
 		bb_simple_error_msg_and_die(bb_msg_write_error);
 
 	if (pingcount == 0 || G.ntransmitted < pingcount) {
+		struct sigaction sa;
+		sa.sa_handler = sp;
+		sigemptyset(&sa.sa_mask);
+		sa.sa_flags = 0;
+
+		if (sigaction(SIGALRM, &sa, NULL) == -1) {
+			perror("Error setting SIGALRM signal handler");
+			return 1;
+		}
+
+		timer_t timerid;
+		struct sigevent sev;
+		sev.sigev_notify = SIGEV_SIGNAL;
+		sev.sigev_signo = SIGALRM;
+		sev.sigev_value.sival_ptr = &timerid;
+
+		if (timer_create(CLOCK_REALTIME, &sev, &timerid) == -1) {
+			perror("Error creating timer");
+			return 1;
+		}
+
+		struct itimerspec its;
+		its.it_value.tv_sec = G.interval_us / 1000000;
+		its.it_value.tv_nsec = G.interval_us % 1000000 /1000;
+		its.it_interval.tv_sec = 0;
+		its.it_interval.tv_nsec = 0;
+
+		if (timer_settime(timerid, 0, &its, NULL) == -1) {
+			perror("Error setting timer");
+			return 1;
+		}
+		#if 0
 		/* Didn't send all pings yet - schedule next in -i SEC interval */
 		struct itimerval i;
 		signal(SIGALRM, sp);
@@ -539,6 +571,7 @@ static void sendping_tail(void (*sp)(int), int size_pkt)
 		i.it_value.tv_sec = G.interval_us / 1000000;
 		i.it_value.tv_usec = G.interval_us % 1000000;
 		setitimer(ITIMER_REAL, &i, NULL);
+		#endif
 	} else { /* -c NN, and all NN are sent */
 		/* Wait for the last ping to come back.
 		 * -W timeout: wait for a response in seconds.
@@ -801,7 +834,7 @@ static void ping4(len_and_sockaddr *lsa)
 		c = recvfrom(pingsock, G.rcv_packet, G.sizeof_rcv_packet, 0,
 				(struct sockaddr *) &from, &fromlen);
 		if (c < 0) {
-			if (errno != EINTR)
+			if (errno != EINTR && errno != EAGAIN)
 				bb_simple_perror_msg("recvfrom");
 			continue;
 		}
diff --git a/procps/top.c b/procps/top.c
index 4cd545c69..56c54ee03 100644
--- a/procps/top.c
+++ b/procps/top.c
@@ -596,7 +596,7 @@ static unsigned long display_header(int scr_width, int *lines_rem_p)
 	open_read_close("loadavg", buf, sizeof(scrbuf) - sizeof("Load average: "));
 	scrbuf[scr_width - 1] = '\0';
 	strchrnul(buf, '\n')[0] = '\0';
-	puts(scrbuf);
+	//puts(scrbuf);
 	(*lines_rem_p)--;
 
 	return meminfo[MI_MEMTOTAL];
@@ -621,7 +621,7 @@ static NOINLINE void display_process_list(int lines_rem, int scr_width)
 
 	/* what info of the processes is shown */
 	printf(OPT_BATCH_MODE ? "%.*s" : ESC"[7m" "%.*s" ESC"[m", scr_width,
-		"  PID  PPID USER     STAT   VSZ %VSZ"
+		"  PID  PPID STAT    VSZ     %VSZ"
 		IF_FEATURE_TOP_SMP_PROCESS(" CPU")
 		IF_FEATURE_TOP_CPU_USAGE_PERCENTAGE(" %CPU")
 		" COMMAND");
@@ -700,11 +700,11 @@ static NOINLINE void display_process_list(int lines_rem, int scr_width)
 		smart_ulltoa5(s->vsz, vsz_str_buf, " mgtpezy");
 		/* PID PPID USER STAT VSZ %VSZ [%CPU] COMMAND */
 		col = snprintf(line_buf, scr_width,
-				"\n" "%5u%6u %-8.8s %s  %.5s" FMT
+				"\n" "  %-5u%-6u %s %.5s   " FMT
 				IF_FEATURE_TOP_SMP_PROCESS(" %3d")
 				IF_FEATURE_TOP_CPU_USAGE_PERCENTAGE(FMT)
 				" ",
-				s->pid, s->ppid, get_cached_username(s->uid),
+				s->pid, s->ppid,
 				s->state, vsz_str_buf,
 				SHOW_STAT(pmem)
 				IF_FEATURE_TOP_SMP_PROCESS(, s->last_seen_on_cpu)
diff --git a/shell/ash.c b/shell/ash.c
index 827643808..d98d58ec9 100644
--- a/shell/ash.c
+++ b/shell/ash.c
@@ -5600,20 +5600,20 @@ openredirect(union node *redir)
 static int
 savefd(int from)
 {
-	int newfd;
-	int err;
-
-	newfd = fcntl(from, F_DUPFD_CLOEXEC, 10);
-	err = newfd < 0 ? errno : 0;
-	if (err != EBADF) {
-		if (err)
-			ash_msg_and_raise_perror("%d", from);
-		close(from);
-		if (F_DUPFD_CLOEXEC == F_DUPFD)
-			close_on_exec_on(newfd);
-	}
-
-	return newfd;
+	// int newfd;
+	// int err;
+
+	// newfd = fcntl(from, F_DUPFD_CLOEXEC, 10);
+	// err = newfd < 0 ? errno : 0;
+	// if (err != EBADF) {
+	// 	if (err)
+	// 		ash_msg_and_raise_perror("%d", from);
+	// 	close(from);
+	// 	if (F_DUPFD_CLOEXEC == F_DUPFD)
+	// 		close_on_exec_on(newfd);
+	// }
+
+	return from;
 }
 static int
 dup2_or_raise(int from, int to)
diff --git a/util-linux/fdisk.c b/util-linux/fdisk.c
index 1c2a7d683..9004a06d8 100644
--- a/util-linux/fdisk.c
+++ b/util-linux/fdisk.c
@@ -2969,6 +2969,7 @@ open_list_and_close(const char *device, int user_specified)
 static int is_whole_disk(const char *disk)
 {
 	unsigned len;
+	#if 0
 	int fd = open(disk, O_RDONLY);
 
 	if (fd != -1) {
@@ -2978,6 +2979,7 @@ static int is_whole_disk(const char *disk)
 		if (!err)
 			return (geometry.start == 0);
 	}
+	#endif
 
 	/* Treat "nameN" as a partition name, not whole disk */
 	/* note: mmcblk0 should work from the geometry check above */
diff --git a/util-linux/fdisk_gpt.c b/util-linux/fdisk_gpt.c
index 4c30f31f8..a152d3a73 100644
--- a/util-linux/fdisk_gpt.c
+++ b/util-linux/fdisk_gpt.c
@@ -108,7 +108,7 @@ gpt_list_table(int xtra UNUSED_PARAM)
 	int i;
 	char numstr6[6];
 
-	smart_ulltoa5(total_number_of_sectors * sector_size, numstr6, " KMGTPEZY")[0] = '\0';
+	smart_ulltoa5((unsigned long long)total_number_of_sectors * (unsigned long long)sector_size, numstr6, " KMGTPEZY")[0] = '\0';
 	printf("Disk %s: %llu sectors, %s\n", disk_device,
 		(unsigned long long)total_number_of_sectors,
 		numstr6);
diff --git a/util-linux/fsfreeze.c b/util-linux/fsfreeze.c
index 6e2ff0a54..6ba039890 100644
--- a/util-linux/fsfreeze.c
+++ b/util-linux/fsfreeze.c
@@ -21,7 +21,7 @@
 //usage:	"Flush and halt writes to MOUNTPOINT"
 
 #include "libbb.h"
-#include <linux/fs.h>
+//#include <linux/fs.h>
 
 #ifndef FIFREEZE
 # define FIFREEZE _IOWR('X', 119, int)
diff --git a/util-linux/fstrim.c b/util-linux/fstrim.c
index 6d673002f..1f0ba5066 100644
--- a/util-linux/fstrim.c
+++ b/util-linux/fstrim.c
@@ -26,7 +26,7 @@
 //usage:     "\n	-v		Print number of discarded bytes"
 
 #include "libbb.h"
-#include <linux/fs.h>
+//#include <linux/fs.h>
 
 #ifndef FITRIM
 struct fstrim_range {
diff --git a/util-linux/mount.c b/util-linux/mount.c
index 4e65b6b46..258ec69b2 100644
--- a/util-linux/mount.c
+++ b/util-linux/mount.c
@@ -255,9 +255,9 @@
     * CONFIG_EXTRA_LDLIBS="tirpc"
     */
 # endif
-# include <rpc/rpc.h>
-# include <rpc/pmap_prot.h>
-# include <rpc/pmap_clnt.h>
+//# include <rpc/rpc.h>
+//# include <rpc/pmap_prot.h>
+//# include <rpc/pmap_clnt.h>
 #endif
 
 
@@ -806,7 +806,13 @@ static int mount_it_now(struct mntent *mp, unsigned long vfsflags, char *filtero
 			update_mtab_entry_on_move(mp);
 		else
 #endif
+		{
+			if (mp->mnt_opts[0] == '\0')
+			{
+				append_mount_options(&(mp->mnt_opts), "rw");
+			}
 			addmntent(mountTable, mp);
+		}
 		endmntent(mountTable);
 
 		if (ENABLE_FEATURE_CLEAN_UP) {
@@ -818,6 +824,7 @@ static int mount_it_now(struct mntent *mp, unsigned long vfsflags, char *filtero
 	return rc;
 }
 
+#if 0
 #if ENABLE_FEATURE_MOUNT_NFS
 
 /*
@@ -1912,6 +1919,8 @@ static int nfsmount(struct mntent *mp, unsigned long vfsflags, char *filteropts)
 
 #endif // !ENABLE_FEATURE_MOUNT_NFS
 
+#endif
+
 // Find "...,NAME=NUM,..." in the option string, remove "NAME=NUM" option
 // and return NUM.
 // Return 0 if not found.
@@ -2089,6 +2098,7 @@ static int singlemount(struct mntent *mp, int ignore_busy)
 	}
 
 	// Might this be an NFS filesystem?
+#if 0
 	if (!(vfsflags & (MS_BIND | MS_MOVE))
 	 && (!mp->mnt_type || is_prefixed_with(mp->mnt_type, "nfs"))
 	) {
@@ -2102,6 +2112,7 @@ static int singlemount(struct mntent *mp, int ignore_busy)
 			goto report_error;
 		}
 	}
+#endif
 
 	// Look at the file.  (Not found isn't a failure for remount, or for
 	// a synthetic filesystem like proc or sysfs.)
@@ -2151,6 +2162,7 @@ static int singlemount(struct mntent *mp, int ignore_busy)
 	// If we know the fstype (or don't need to), jump straight
 	// to the actual mount.
 	if (mp->mnt_type || (vfsflags & (MS_REMOUNT | MS_BIND | MS_MOVE))) {
+
 		char *next;
 		for (;;) {
 			next = mp->mnt_type ? strchr(mp->mnt_type, ',') : NULL;
diff --git a/util-linux/umount.c b/util-linux/umount.c
index 23da32868..18d5dea67 100644
--- a/util-linux/umount.c
+++ b/util-linux/umount.c
@@ -169,6 +169,8 @@ int umount_main(int argc UNUSED_PARAM, char **argv)
 			argv++;
 			path = xmalloc_realpath(zapit);
 			if (path) {
+				size_t length = strlen(path);
+				path[length - 1] = '\0';
 				for (m = mtl; m; m = m->next)
 					if (strcmp(path, m->dir) == 0 || strcmp(path, m->device) == 0)
 						break;
